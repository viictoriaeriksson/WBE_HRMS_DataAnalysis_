# IMS DATA - Obtain Bin number

### Load packages

```{r}
#| output: false

# if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
# 
# BiocManager::install("tidyverse")
# BiocManager::install("factoextra")
# BiocManager::install("msdata")
# BiocManager::install("mzR")
# BiocManager::install("rhdf5")
# BiocManager::install("rpx")
# BiocManager::install("MsCoreUtils")
# BiocManager::install("QFeatures")
# BiocManager::install("Spectra")
# BiocManager::install("ProtGenerics")
# BiocManager::install("PSMatch")
# BiocManager::install("pheatmap")
# BiocManager::install("limma")
# BiocManager::install("MSnID")
# BiocManager::install("RforMassSpectrometry/SpectraVis")
# 
# BiocManager::install("synapter")

library(mzR)
library(Spectra)
library(tidyverse)
library(viridis)
library(patchwork)
library(crayon)
```

### Functions

```{r}
#' Imports raw IMS-HRMS data (.mzML) and target compounds (.csv) to be found in the raw data
#'
#' This functions takes a mzML-file and/or a csv-file (output from MZmine) and import 
#' them to the global environment. 
#' For the outtput from MZmine, depending on this method used for finding compounds
#' the type should be put to spectra_library or precursor_search.

#' @param direction_raw Direction to mzML file, should be IMS-HRMS data
#' @param direction_target Direction to csv-file, contining target compounds in output format from MZmine
#' @param type should etiher be spectra_library or precursor_search
#' @return Two data frames, one for the raw data (sp_ims) and one for target compounds (target_compounds), found in global environment.
#' @examples
#'   data_import("path/raw_data", "path/target_data", "spectra_library")
#'   data_import("path/target_data", "spectra_library")
#'   data_import("path/raw_data")

data_import <- function(direction_raw = NULL, direction_target = NULL, type = NULL) {
  if (!is.null(direction_raw)) {
    raw_spectra <- Spectra(direction_raw)
    assign("sp_ims", raw_spectra, envir=globalenv())
  }
  
  if (!is.null(direction_target)) {
  if (missing(type) || !(type %in% c("spectra_library", "precursor_search"))) {
    stop(
      paste0(
        italic("type"),
        " needs ",
        bold('"spectra_library"'),
        " or ",
        bold('"precursor_search"')
        )
      )
  }
  if (type =="spectra_library") {
    #import the output from MZmine, when spectra library search have been used
    target_import <- read_csv(direction_target) |> 
      select("spectral_db_matches:compound_name", "mz", "rt", "ion_mobility") |> 
      rename(compound_name="spectral_db_matches:compound_name")
  } else if (type =="precursor_search") {
    #import the output from MZmine, when precursor search have been used
    target_import <- read_csv(direction_target) |> 
      select("compound_db_identity:compound_name", "mz", "rt","ion_mobility") |>
      rename(compound_name="compound_db_identity:compound_name")
  }
  assign("target_compounds", target_import, envir=globalenv())
  }
}

```

```{r}
#' Extraction of MS1 Level parameters from a Spectra objects
#'
#' This function takes an S4 object and filters it for MS1 and from these 
#' extract useful parameter (mz, retetion time, intensity, drift time) as wel as 
#' creating a extract parameters called bin. The parameters are then combined to a
#' data frame exported to the global environment, for later use.

#' @param spectra_object An S4 object containing mass spectrometry data.
#' @return A dataframe (combine_raw_dataframe) with extracted MS1 parameters, found in global environment.

extraction_of_data <- function(spectra_object) {
  if (!isS4(spectra_object)) {
    stop(
      paste0(
        italic("spectra_object"),
        " needs to be a ",
        bold('"S4"'),
        " object."
        )
      )
  }
  # Filter for MS1 
  sp_ims_ms1 <- filterMsLevel(spectra_object, msLevel. = 1)
  
  # Extract mz, rtime, intensity, and scan index. Futhermore, bin values are created from scan index
  mz_ms1 <- mz(sp_ims_ms1)
  rtime_ms1 <- rtime(sp_ims_ms1)
  intensity_ms1 <- intensity(sp_ims_ms1)
  scanindex_ms1 <- scanIndex(sp_ims_ms1)
  bin_values_ms1 <- rep(1:200, length.out = length(scanindex_ms1))
  dtime_ms1 <- sp_ims_ms1[["ionMobilityDriftTime"]]
  
  #Unlist mz and intensity values so it becomes a vector instead of a list with lists
  mz_ms1_unlisted <- unlist(mz_ms1)
  intensity_ms1_unlisted <- unlist(intensity_ms1)
  
  # Function that repeates the values in some of the objects to be same length as mz values
  repeat_ms1 <- function(A, B){
    unlist(mapply(function(a, b) rep(b, length(a)), A, B))
  }
  
  #Use function to extend rtime, scandindex, and bin values so they are repated to the length of mz
  rtime_ms1_repated <- repeat_ms1(mz_ms1, rtime_ms1)
  scanindex_ms1_repated <- repeat_ms1(mz_ms1, scanindex_ms1)
  bin_values_ms1_repated <- repeat_ms1(mz_ms1, bin_values_ms1)
  dtime_ms1_repated <- repeat_ms1(mz_ms1, dtime_ms1)
  
  
  #Combine the new objects into a dataframe to make it easier to wokr with later
  combine_dataframe <- data.frame(scanindex_ms1 = scanindex_ms1_repated,
                                  bin_values_ms1 = bin_values_ms1_repated,
                                  mz_ms1 = mz_ms1_unlisted,
                                  rtime_ms1 = rtime_ms1_repated/60,
                                  intensity_ms1 = intensity_ms1_unlisted,
                                  dtime_ms1 = dtime_ms1_repated
                                  )
  #Remove the unlisted and repated objects to same memory
  #rm(rtime_ms1_repated, scanindex_ms1_repated, bin_values_ms1_repated, mz_ms1_unlisted, intensity_ms1_unlisted, dtime_ms1_repated)
  assign("combine_raw_dataframe", combine_dataframe, envir=globalenv())
}

```

```{r}
#' Finds the target compounds in the raw IMS-HRMS MS1 data
#'
#' This functions takes a data frame containing target compunds (should be the
#'  output from MZmine) to match with a data frame containing raw IMS-HRMS MS1
#'  parameters (with at least mz and rt values)

#' @param target_file Direction to mzML file, should be IMS-HRMS data
#' @param raw_MS1parameters_dataframe Direction to csv-file, contining target compounds in output format from MZmine
#' @param tolerance_mz tolerance to be used to match precursor m/z, default 0.003
#' @param tolerance_rt tolerance to be used to match retention time, default 0.001
#' @return Data frames with the found target compounds in the raw data (subset_targets), found in global environment.

find_targets_in_raw <- function(target_file=NULL, raw_MS1parameters_dataframe=NULL, tolerance_mz=0.003, tolerance_rt=0.001) {
  if (is.null(target_file) || is.null(raw_MS1parameters_dataframe)) {
    stop(
      paste0("Need the inputs of ",
      bold("target_file"),
      " and ",
      bold("raw_MS1parameters_dataframe"),
      " \n to be able to find the compounds in the raw data.")
    )
  }
  
  # Adds mz and rt range to the target compounds
  target_file$mz_min <- target_file$mz-tolerance_mz 
  target_file$mz_max <- target_file$mz+tolerance_mz
  target_file$rt_min <- target_file$rt-tolerance_rt
  target_file$rt_max <- target_file$rt+tolerance_rt
  # Finds the compounds from the target compounds in the raw data by using the join function
  subset_targets_in_raw <- target_file |> 
    inner_join(raw_MS1parameters_dataframe, join_by(overlaps("mz_min","mz_max","mz_ms1", "mz_ms1"),overlaps("rt_min","rt_max","rtime_ms1", "rtime_ms1")))
  
  assign("subset_targets", subset_targets_in_raw, envir=globalenv())
}

```

```{r}
#' Plots drift time spectra for found compounds
#'
#' This function uses a data frame with found target compounds in raw IMS-HRMS MS1
#'  data and plots the drift time spectra for each compound and retention time as
#'  bin values vs intensities

#' @param found_targets An data frame with found target compounds
#' @return Plots with bin values vs intensities for each compounds retention time

check_dt_spectra <- function(found_targets, compound_name=NULL) {
  
    # Check if compound_name is provided
  if (!is.null(compound_name)) {
    found_targets <- found_targets |> filter(compound_name == !!compound_name)
  }
  
  # Plot of intensities versus bins (related to drift times) for each compound to check the drift time peak forms
  p <- found_targets |> #filter(compound_name == "Ecgonine methyl ester") |> 
    ggplot(aes(x=bin_values_ms1,y=intensity_ms1))+
    geom_line(linewidth=0.4)+
    geom_point(aes(colour=compound_name), size=1)+
  
    #facet_wrap(vars(compound_name), scales="free", nrow=3)+ #separates the plots for each compound and scales separeately for each plot
    facet_wrap(vars(compound_name, round(rtime_ms1, 4)), scales="free_y", nrow=3)+ #separates the plots for each compound and rtime
    
    theme_minimal()+
    theme(
      #panel.border = element_blank(), axis.line = element_line(),
      panel.background = element_rect(fill = "white"),  # Set white background
      panel.grid = element_blank(),  # Remove grid lines
      axis.text = element_text(size = 9),  # Increase font size of axis text
      axis.title.y = element_text(size = 9,face = "bold"),  # Make y-axis label bold and italic
      axis.text.y = element_text(color = "black", size = 9),  # Make x-axis text bold
      axis.title.x = element_text(size = 10,face = "bold"),
      axis.text.x = element_text(color = "black", size = 9),  # Make x-axis text bold
      axis.ticks.x = element_line(color = "black"),  # Add ticks to x-axis in black color
      axis.ticks.y = element_line(color = "black"),  # Add ticks to y-axis in black color
      #aspect.ratio = 1,  # Set aspect ratio
      #plot.margin = margin(0.5, 0.5, 0.4, 0.5, "cm"),  # Set plot margins
      legend.text=element_text(size=9),
      legend.position = "none",
      legend.background = element_rect(fill="white",
                                     size=0.5, linetype="solid", 
                                     colour ="black"),
      legend.title = element_blank())
  return(p)
}

```

```{r}
#' Filter the found target compounds data frame
#'
#' This function uses a data frame with found target compounds in raw IMS-HRMS MS1
#'  data and filters it intensity and deviation between targets compounds drift 
#'  times and raw IMS-HRMS MS1 drift times. Create an output .csv file to be used 
#'  with arcMS packaged to obtain CCS values from UNIFI for target compounds.

#' @param found_targets An data frame with found target compounds
#' @param intensity_cutoff Cutoff intensity to filter compounds, with default 300
#' @param dt_tolerance Tolerance between targets and raw datas drift times, default is 1e-8, if on wants no deviation
#' @param output_direction Optional, Direction for the output .csv file with filtered data
#' @param file_name Optional, Name for the output .csv file to be used in arcMS
#' @return Data frame with the filtered compounds (input_arcMS_CCS), found in global environment and optional .csv file with compounds.
#' @examples
#'   filter_found_compounds(data_frame, "path/output_file", "name_output_file")

filter_found_compounds <- function(found_targets, intensity_cutoff=300, dt_tolerance=1e-8, output_direction=NULL, file_name=NULL) {
  #Filter by intensity and to match the DT from MZmine and Raw data
  tolerance <-dt_tolerance
  filtered_compounds <- found_targets |> group_by(compound_name, rtime_ms1) |> 
    filter(max(intensity_ms1) > intensity_cutoff) |>
    filter(abs(ion_mobility - dtime_ms1) < tolerance)
  
  assign("input_arcMS_CCS", filtered_compounds, envir=globalenv())
  
  if(is.null(output_direction) && !is.null(file_name)){
    stop(
      paste0("Need the ",
      bold("output_direction"),
      ".")
    )
  } 
  if (is.null(file_name) && !is.null(output_direction)){
    stop(
      paste0("Need the ",
      bold("file_name"),
      ".")
    )
  }

  if (!is.null(output_direction) && !is.null(file_name)) {
    # Construct the full file path
    output_path <- file.path(output_direction, paste0(file_name, ".csv"))
    #save to a .csv-file for input with arcMS package
    write.csv(filtered_compounds, file = output_path, row.names = FALSE)
  } 
}

```

TEST FUNCTIONS

```{r}
data_import("C:/Users/vicer06/OneDrive - Linköpings universitet/Documents/01_Projects/03_Library_Building_DrugStD/Individual_Drug_StD_240527/Drug_StD_240527/20240527_drugmix_200ppb_woadv_pos_2_C,1_1.mzML",
            "C:/Users/vicer06/OneDrive - Linköpings universitet/Documents/01_Projects/03_Library_Building_DrugStD/Individual_Drug_StD_240527/Drug_StD_240527/test_arcMSCCS_script_drugmix_woadv_MZmine.csv", type="spectra_library")

extraction_of_data(sp_ims)

find_targets_in_raw(target_compounds, combine_raw_dataframe)
check_dt_spectra(subset_targets) 

subset_targets |> filter(compound_name=="Temazepam")
check_dt_spectra(subset_targets, compound_name="Temazepam") 

filter_found_compounds(subset_targets)

filter_found_compounds(subset_targets, output_direction="C:/Users/vicer06/OneDrive - Linköpings universitet/Documents/01_Projects/03_Library_Building_DrugStD/Individual_Drug_StD_240527/Drug_StD_240527", file_name= "input_arcMS_CCS")
#if using windows directory format directly
filter_found_compounds(subset_targets, output_direction=r"(C:\Users\vicer06\OneDrive - Linköpings universitet\Documents\01_Projects\03_Library_Building_DrugStD\Individual_Drug_StD\Drug_StD_240527)", file_name= r"(input_arcMS_CCS)")
```

TEST Individual Drug StD

```{r}
#3CMC
data_import("C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\Drug_StD_240527\\20240527_3CMC_200ppb_woadv_pos_2_B,8_1.mzML",
            "~/01_Projects/03_Library_Building_DrugStD/Individual_Drug_StD/Drug_StD_240527/test_export_arcMS_CCS_3CMC.csv", type="spectra_library")
extraction_of_data(sp_ims)
find_targets_in_raw(target_compounds, combine_raw_dataframe)

check_dt_spectra(subset_targets) 

filter_found_compounds(subset_targets, output_direction="C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\Drug_StD_240527", file_name= "input_arcMS_CCS_3CMC")

#4CMC
data_import("C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\Drug_StD_240527\\20240527_4CMC_200ppb_woadv_pos_2_B,3_1.mzML",
            "~/01_Projects/03_Library_Building_DrugStD/Individual_Drug_StD/Drug_StD_240527/test_export_arcMS_CCS_4CMC.csv", type="spectra_library")
extraction_of_data(sp_ims)
find_targets_in_raw(target_compounds, combine_raw_dataframe)

check_dt_spectra(subset_targets) 

filter_found_compounds(subset_targets, output_direction="C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\Drug_StD_240527", file_name= "input_arcMS_CCS_4CMC")

#Cocaine
data_import("C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\Drug_StD_240527\\20240527_Cocaine_200ppb_woadv_pos_2_B,4_1.mzML",
            "~/01_Projects/03_Library_Building_DrugStD/Individual_Drug_StD/Drug_StD_240527/test_export_arcMS_CCS_Cocaine.csv", type="spectra_library")
extraction_of_data(sp_ims)
find_targets_in_raw(target_compounds, combine_raw_dataframe)

check_dt_spectra(subset_targets) 
filter_found_compounds(subset_targets)

filter_found_compounds(subset_targets, output_direction="C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\Drug_StD_240527", file_name= "input_arcMS_CCS_Cocaine")

#Fentanyl
data_import("C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\Drug_StD_240527\\20240527_Fentanyl_200ppb_woadv_pos_2_B,5_1.mzML",
            "~/01_Projects/03_Library_Building_DrugStD/Individual_Drug_StD/Drug_StD_240527/test_export_arcMS_CCS_Fentanyl.csv", type="spectra_library")
extraction_of_data(sp_ims)
find_targets_in_raw(target_compounds, combine_raw_dataframe)

check_dt_spectra(subset_targets) 

filter_found_compounds(subset_targets, output_direction="C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\Drug_StD_240527", file_name= "input_arcMS_CCS_Fentanyl")

#MDPV
data_import("C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\Drug_StD_240527\\20240527_MDPV_200ppb_woadv_pos_2_B,6_1.mzML",
            "~/01_Projects/03_Library_Building_DrugStD/Individual_Drug_StD/Drug_StD_240527/test_export_arcMS_CCS_MDPV.csv", type="spectra_library")
extraction_of_data(sp_ims)
find_targets_in_raw(target_compounds, combine_raw_dataframe)

check_dt_spectra(subset_targets) 

filter_found_compounds(subset_targets, output_direction="C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\Drug_StD_240527", file_name= "input_arcMS_CCS_MDPV")

#Mephedrone
data_import("C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\Drug_StD_240527\\20240527_Mephedrone_200ppb_woadv_pos_2_B,1_1.mzML",
            "~/01_Projects/03_Library_Building_DrugStD/Individual_Drug_StD/Drug_StD_240527/test_export_arcMS_CCS_Mephedrone.csv", type="spectra_library")
extraction_of_data(sp_ims)
find_targets_in_raw(target_compounds, combine_raw_dataframe)

check_dt_spectra(subset_targets) 

filter_found_compounds(subset_targets, output_direction="C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\Drug_StD_240527", file_name= "input_arcMS_CCS_Mephedrone")

#THC
data_import("C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\Drug_StD_240527\\20240527_THC_200ppb_woadv_pos_2_B,7_1.mzML",
            "~/01_Projects/03_Library_Building_DrugStD/Individual_Drug_StD/Drug_StD_240527/test_export_arcMS_CCS_THC.csv", type="spectra_library")
extraction_of_data(sp_ims)
find_targets_in_raw(target_compounds, combine_raw_dataframe)

check_dt_spectra(subset_targets) 

filter_found_compounds(subset_targets, output_direction="C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\Drug_StD_240527", file_name= "input_arcMS_CCS_THC")
```

------------------------------------------------------------------------

------------------------------------------------------------------------

### Import data {style="color: black"}

```{r}
#RAW data file of IMS-HRMS data in .mzML format
mz_ims <- "C:/Users/vicer06/OneDrive - Linköpings universitet/Documents/01_Projects/02_NM-CT-stdAB_Collaboration_CCS_MEASURMENT_2024/NMCTAB_2024_03_21_MSconvert_MSDIAL/NMCT_StdB_100ppb_gradientchange2_190324_1_A,5_1.mzML"

mz_ims <- "C:/Users/vicer06/OneDrive - Linköpings universitet/Documents/01_Projects/02_NM-CT-stdAB_Collaboration_CCS_MEASURMENT_2024/NMCTAB_2024_03_21_MSconvert_MSDIAL/NMCT_StdA_100ppb_gradientchange2_190324_1_B,3_2.mzML"

mz_ims <- "C:/Users/vicer06/OneDrive - Linköpings universitet/Documents/01_Projects/03_Library_Building_DrugStD/Individual_Drug_StD_240527/Drug_StD_240527/20240527_drugmix_200ppb_woadv_pos_2_C,1_1.mzML"

sp_ims <- Spectra(mz_ims)

#Data frame of m/z and RT
#target_compounds <- data.frame(
#  compound_name = c("Metformin", "2-aminobenzothiazole", "Hydrocortisone", "4-Androstene-3,17-dione", "Benzophenone", "Testosterone", "Progesterone"),
#  mz = c(130.1077, 151.0305, 363.2151, 287.1997, 183.0641, 289.2149, 315.2314),
#  rt = c(0.42, 1.95, 3.98, 4.55, 4.62, 4.7, 5.16)
#)

#import the output from MZmine, when precuros search have been used
target_compounds <- read_csv("C:/Users/vicer06/OneDrive - Linköpings universitet/Documents/01_Projects/02_NM-CT-stdAB_Collaboration_CCS_MEASURMENT_2024/test_arcMSCCS_script_nmcrstdB_100ppb_rep1_MZmine.csv") |> 
  select("compound_db_identity:compound_name", "mz", "rt", "ion_mobility") |> 
  rename(compound_name="compound_db_identity:compound_name")


target_compounds <- read_csv("C:/Users/vicer06/OneDrive - Linköpings universitet/Documents/01_Projects/02_NM-CT-stdAB_Collaboration_CCS_MEASURMENT_2024/test_arcMSCCS_script_nmcrstdA_100ppb_rep2_MZmine.csv") |> 
  select("compound_db_identity:compound_name", "mz", "rt","ion_mobility") |> 
  rename(compound_name="compound_db_identity:compound_name")

#import the output from MZmine, when spectra library search have been used
target_compounds <- read_csv("C:/Users/vicer06/OneDrive - Linköpings universitet/Documents/01_Projects/03_Library_Building_DrugStD/Individual_Drug_StD_240527/Drug_StD_240527/test_arcMSCCS_script_drugmix_woadv_MZmine.csv") |> 
  select("spectral_db_matches:compound_name", "mz", "rt", "ion_mobility") |> 
  rename(compound_name="spectral_db_matches:compound_name")
```

### 

### Extraction of data

```{r}
# Filter for MS1 
sp_ims_ms1 <- filterMsLevel(sp_ims, msLevel. = 1)

# Extract mz, rtime, intensity, and scan index. Futhermore, bin values are created from scan index
mz_ms1 <- mz(sp_ims_ms1)
rtime_ms1 <- rtime(sp_ims_ms1)
intensity_ms1 <- intensity(sp_ims_ms1)
scanindex_ms1 <- scanIndex(sp_ims_ms1)
bin_values_ms1 <- rep(1:200, length.out = length(scanindex_ms1))
dtime_ms1 <- sp_ims_ms1[["ionMobilityDriftTime"]]

#Unlist mz and intensity values so it becomes a vector instead of a list with lists
mz_ms1_unlisted <- unlist(mz_ms1)
intensity_ms1_unlisted <- unlist(intensity_ms1)

# Function that repeates the values in some of the objects to be same length as mz values
repeat_ms1 <- function(A, B){
  unlist(mapply(function(a, b) rep(b, length(a)), A, B))
}

#Use function to extend rtime, scandindex, and bin values so they are repated to the length of mz
rtime_ms1_repated <- repeat_ms1(mz_ms1, rtime_ms1)
scanindex_ms1_repated <- repeat_ms1(mz_ms1, scanindex_ms1)
bin_values_ms1_repated <- repeat_ms1(mz_ms1, bin_values_ms1)
dtime_ms1_repated <- repeat_ms1(mz_ms1, dtime_ms1)


#Combine the new objects into a dataframe to make it easier to wokr with later
combine_raw_dataframe <- data.frame(scanindex_ms1 = scanindex_ms1_repated,
                                bin_values_ms1 = bin_values_ms1_repated,
                                mz_ms1 = mz_ms1_unlisted,
                                rtime_ms1 = rtime_ms1_repated/60,
                                intensity_ms1 = intensity_ms1_unlisted,
                                dtime_ms1 = dtime_ms1_repated
                                )
#Remove the unlisted and repated objects to same memory
rm(rtime_ms1_repated, scanindex_ms1_repated, bin_values_ms1_repated, mz_ms1_unlisted, intensity_ms1_unlisted, dtime_ms1_repated)
```

### Add match range for target compounds and subsets raw ions fo achieve Bins

```{r}
# Adds mz and rt range to the target compounds
tolerance_mz <- 0.003  #0.0003
tolerance_rt <- 0.001 #0.001

target_compounds$mz_min <- target_compounds$mz-tolerance_mz 
target_compounds$mz_max <- target_compounds$mz+tolerance_mz
target_compounds$rt_min <- target_compounds$rt-tolerance_rt
target_compounds$rt_max <- target_compounds$rt+tolerance_rt

#target_compounds$dt_min <- target_compounds$ion_mobility-tolerance_rt
#target_compounds$dt_max <- target_compounds$ion_mobility+tolerance_rt

# Finds the compounds from the target compounds in the raw data by using the join function
subset_targets <- target_compounds |> 
  inner_join(combine_raw_dataframe, join_by(overlaps("mz_min","mz_max","mz_ms1", "mz_ms1"),overlaps("rt_min","rt_max","rtime_ms1", "rtime_ms1"))) #|> 
  #arrange(compound_name, desc(intensity_ms1))



#subset_targets <- target_compounds |> 
#  inner_join(combine_raw_dataframe, join_by(overlaps("mz_min","mz_max","mz_ms1", "mz_ms1"),overlaps("dt_min","dt_max","dtime_ms1", "dtime_ms1")))

# Only keeps highest intensity of target compounds 
#high_intensity_targets <- subset_targets |> 
#  slice_max(intensity_ms1, by = compound_name)

```

### Check quality of data

```{r}
# Plot of intensities versus bins (related to drift times) for each compound to check the drift time peak forms
subset_targets |> #filter(compound_name == "Ecgonine methyl ester") |> 
  ggplot(aes(x=bin_values_ms1,y=intensity_ms1))+
  geom_line(size=0.4)+
  #geom_point(aes(colour=compound_name), size=1)+
  
  geom_point(aes(colour=ifelse(abs(ion_mobility - dtime_ms1) < 1e-8, "red", "black")), size=1) +
  scale_colour_identity() +  # This ensures the colors are taken as is
  
  #facet_wrap(vars(compound_name), scales="free", nrow=3)+ #separates the plots for each compound and scales separeately for each plot
  facet_wrap(vars(compound_name, round(rtime_ms1, 4)), scales="free_y", nrow=3)+ #separates the plots for each compound and rtime
  
  theme_minimal()+
  theme(
    panel.background = element_rect(fill = "white"),  # Set white background
    panel.grid = element_blank(),  # Remove grid lines
    axis.text = element_text(size = 9),  # Increase font size of axis text
    axis.title.y = element_text(size = 9,face = "bold"),  # Make y-axis label bold and italic
    axis.text.y = element_text(color = "black", size = 9),  # Make x-axis text bold
    axis.title.x = element_text(size = 10,face = "bold"),
    axis.text.x = element_text(color = "black", size = 9),  # Make x-axis text bold
    axis.ticks.x = element_line(color = "black"),  # Add ticks to x-axis in black color
    axis.ticks.y = element_line(color = "black"),  # Add ticks to y-axis in black color
    #aspect.ratio = 1,  # Set aspect ratio
    #plot.margin = margin(0.5, 0.5, 0.4, 0.5, "cm"),  # Set plot margins
    legend.text=element_text(size=9),
    legend.position = "none",
    legend.background = element_rect(fill="white",
                                   size=0.5, linetype="solid", 
                                   colour ="black"),
    legend.title = element_blank())

```

### Filter data for the final exportation to a .csv file

```{r}
#Remove lower intensity peaks and if multple rt for one compound and they have same bin, only keep with highest intensity
export_arcMS_CCS <- subset_targets |> 
  group_by(compound_name, rtime_ms1) |> 
  filter(max(intensity_ms1) > 300) |>
  #ungroup()|> 
  #slice_max(intensity_ms1, by = compound_name) 
  slice_max(intensity_ms1) |> 
  ungroup() |> 
  group_by(compound_name, bin_values_ms1) |> 
  slice_max(intensity_ms1)

#Filter by intensity and to match the DT from MZmine and Raw data
tolerance <-1e-8
export_arcMS_CCS <- subset_targets |> group_by(compound_name, rtime_ms1) |> 
  filter(max(intensity_ms1) > 300) |>
  filter(abs(ion_mobility - dtime_ms1) < tolerance)

################## Filter for Bin-1, Bin, Bin+1 #########################
filters_test2 <- subset_targets |> 
  group_by(compound_name, rtime_ms1) |> 
  filter(any(abs(ion_mobility - dtime_ms1)<tolerance) & bin_values_ms1 %in% c(bin_values_ms1[which(abs(ion_mobility - dtime_ms1)<tolerance)]-1, bin_values_ms1[which(abs(ion_mobility - dtime_ms1)<tolerance)], bin_values_ms1[which(abs(ion_mobility - dtime_ms1)<tolerance)]+1))
    
    
#save to a .csv-file for input with arcMS package
write.csv(filters_test2, file = "E:/arcMS scripts/input_arcMS_CCS_NMCTStDB_Average.csv", row.names = FALSE)
```

```{r}
export_arcMS_CCS|> #filter(compound_name == "2-aminobenzothiazole") |> 
  ggplot(aes(x=bin_values_ms1,y=intensity_ms1))+
  geom_line(size=0.4)+
  geom_point(aes(colour=compound_name), size=1)+

  #facet_wrap(vars(compound_name), scales="free", nrow=3)+ #separates the plots for each compound and scales separeately for each plot
  facet_wrap(vars(compound_name, rtime_ms1), scales="free_y", nrow=3)+ #separates the plots for each compound and rtime

  
  theme_minimal()+
  theme(
    panel.background = element_rect(fill = "white"),  # Set white background
    panel.grid = element_blank(),  # Remove grid lines
    axis.text = element_text(size = 9),  # Increase font size of axis text
    axis.title.y = element_text(size = 9,face = "bold"),  # Make y-axis label bold and italic
    axis.text.y = element_text(color = "black", size = 9),  # Make x-axis text bold
    axis.title.x = element_text(size = 10,face = "bold"),
    axis.text.x = element_text(color = "black", size = 9),  # Make x-axis text bold
    axis.ticks.x = element_line(color = "black"),  # Add ticks to x-axis in black color
    axis.ticks.y = element_line(color = "black"),  # Add ticks to y-axis in black color
    #aspect.ratio = 1,  # Set aspect ratio
    #plot.margin = margin(0.5, 0.5, 0.4, 0.5, "cm"),  # Set plot margins
    legend.text=element_text(size=9),
    legend.position = "none",
    legend.background = element_rect(fill="white",
                                   size=0.5, linetype="solid", 
                                   colour ="black"),
    legend.title = element_blank())
```

------------------------------------------------------------------------

### Add CCS values to Spectral Libraries

```{r}
#Import spectral library and output from arcMS with CCS-values
spectral_library  <- readLines("C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\TEST_arcMS_CSS_SCRIPT_Spec_Library_Drugs_COMBINED_FilteredFRAgments.msp")

output_arcMS_CCS  <- read_csv("C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\Drug_StD_240527\\ccs_drugmixwoadv_testarcMS2.csv") |> 
  rename(Name ="compound_name") |> 
  mutate(CCS = round(CCS, 5))

# Function to insert CCS values into the .msp file
insert_ccs <- function(msp_data, ccs_data) {
  updated_msp <- c()
  compound_name <- NULL
  compound_block <- c()
  inside_block <- FALSE
  insert_position <- NULL
  
  for (line in msp_data) {
    if (startsWith(line, "Name:")) {
      compound_name <- sub("Name: ", "", line)
      inside_block <- TRUE
      compound_block <- c(compound_block, line)
    } else if (line == "") {
      if (inside_block) {
        # Insert CCS value
        ccs_value <- ccs_data$CCS[ccs_data$Name == compound_name]
        if (length(ccs_value) >= 1) {
          if (is.null(insert_position)) {
            # Find the position to insert CCS
            insert_position <- which(str_detect(compound_block, "Precursor_type: ")) 
          }
          if (!is.na(insert_position) && insert_position <= length(compound_block)) {
            compound_block <- append(compound_block, paste("CCS:", ccs_value), after = insert_position)
          }
        }
        updated_msp <- c(updated_msp, compound_block, "")
        compound_block <- c()
        compound_name <- NULL
        inside_block <- FALSE
        insert_position <- NULL
      }
    } else if (inside_block) {
      compound_block <- c(compound_block, line)
    } else {
      updated_msp <- c(updated_msp, line)
    }
  }
  return(updated_msp)
}

# Insert the CCS values into the .msp data
updated_msp_data <- insert_ccs(spectral_library, output_arcMS_CCS)

# Write the updated .msp data to a new file
writeLines(updated_msp_data, "C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD\\Drug_StD_240527\\updated_spec_library.msp")


```

### Compare CCS data and Spectra Library

```{r}
#Function to calculate the difference of CCS with three digits
CCS_error <- function(CCS_library,CCS_meaured){
  CCS_diff <- round((CCS_meaured-CCS_library)/CCS_library*10^2, digits=3)
  return(CCS_diff)
}
```

```{r}
#Import spectral library and output from arcMS with CCS-values
input_library <- readLines("C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD_240527\\Drug_StD_240527\\updated_spec_library.msp")

input_arsMS_CCS  <- read_csv("C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD_240527\\Drug_StD_240527\\ccs_drugmixwoadv_testarcMS2_NEW.csv") |> 
  rename(Name ="compound_name") |> 
  mutate(CCS = round(CCS, 5))

parse_msp <- function(lines) {
  compounds <- list()  # List to hold all compounds
  compound <- list()   # Temporary list to hold a single compound's data
  
  for (line in lines) {
    if (startsWith(line, "Name:")) {
      if (length(compound) > 0) {  # If the current compound list is not empty
        compounds[[length(compounds) + 1]] <- compound  # Add the current compound to the list of compounds
      }
      compound <- list()  # Reset the compound list for the next compound
      compound$Name <- sub("Name: ", "", line)  # Extract and store the compound name
    } else if (startsWith(line, "CCS:")) {
      compound$CCS <- as.numeric(sub("CCS: ", "", line))  # Extract and store the CCS value
    } else if (line == "" && length(compound) > 0) {
      # If a blank line is encountered and the current compound list is not empty
      compounds[[length(compounds) + 1]] <- compound  # Add the current compound to the list of compounds
      compound <- list()  # Reset the compound list for the next compound
    }
  }
  if (length(compound) > 0) {  # After the loop, check if there's any remaining compound to add
    compounds[[length(compounds) + 1]] <- compound
  }
  return(compounds)  # Return the list of compounds
}

library_compounds <- parse_msp(input_library)

# Convert the list to a data frame
library_df <- do.call(rbind, lapply(library_compounds, function(x) {
  data.frame(
    Name = ifelse(is.null(x$Name), NA, x$Name),
    CCS = ifelse(is.null(x$CCS), NA, x$CCS),
    stringsAsFactors = FALSE
  )
}))


# Merge the data frames on the 'Name' column
merged_df <- merge(input_arsMS_CCS, library_df, by = "Name", suffixes = c("_data", "_library"))

# Compare the CCS values
merged_df <- merged_df |> 
  mutate(CCS_difference = abs(CCS_library - CCS_data)) |> 
  mutate(CCS_error = CCS_error(CCS_library, CCS_data))

```

```{r}
## compare CCS with MZmine output containing library CCS-values
#Import spectral library and output from arcMS with CCS-values
input_library <- read_delim("~/01_Projects/03_Library_Building_DrugStD/Individual_Drug_StD_240527/Drug_StD_240527/MZmine_output_drugmix_woadv_CCSlibrary.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE) |> 
  rename(CCS='spectral_db_matches:ccs', Name='spectral_db_matches:compound_name')

input_arsMS_CCS  <- read_delim("C:/Users/vicer06/OneDrive - Linköpings universitet/Documents/01_Projects/03_Library_Building_DrugStD/Individual_Drug_StD_240527/Drug_StD_240527/ccs_drugmixwoadv_testarcMS2_NEW.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE) |> 
  rename(Name ="compound_name") |> 
  mutate(CCS = round(CCS, 5))

merged_df <- merge(input_arsMS_CCS, input_library, by = "Name", suffixes = c("_data", "_library"))

# Compare the CCS values
merged_df <- merged_df |> 
  mutate(CCS_difference = abs(CCS_library - CCS_data)) |> 
  mutate(CCS_error = CCS_error(CCS_library, CCS_data))

```

------------------------------------------------------------------------

------------------------------------------------------------------------

### Amphetamine fragment Search

```{r}
#import the output from MZmine, when spectra library search have been used
mzmine_output <- read_csv("C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD_240527\\Drug_StD_240527\\test_export_amphetamine.csv") #|> 
  #select("spectral_db_matches:compound_name", "mz", "rt", "ion_mobility") |> 
  #rename(compound_name="spectral_db_matches:compound_name")

mzmine_output <- read_csv("C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\01_VION_HRMS_MSConvert_Processing_2024\\QC_mix_MSDIAL_MZmine_Files\\new_old_settings_drugmix_featurelist_MzMine.csv")


amphet_list <- data.frame(
  compound_name = c("Precursor", "Frag1", "Frag2"),
  mz_target = c(136.112075, 91.054775,  119.085526)
)


# Adds mz and rt range to the target compounds
tolerance_mz <- 0.003  #0.0003
amphet_list$mz_min <- amphet_list$mz_target-tolerance_mz 
amphet_list$mz_max <- amphet_list$mz_target+tolerance_mz


# Finds the compounds from the target compounds in the raw data by using the join function
subset_amphet <- amphet_list |> 
  inner_join(mzmine_output, join_by(overlaps("mz_min","mz_max","mz", "mz")))





# Perform a self-join to compare each row with every other row
df_filtered <- subset_amphet |> 
  rename(A1 = compound_name, B1 = rt) |> 
  inner_join(subset_amphet  |>  rename(A2 = compound_name, B2 = rt), by = character())  |> 
  # Keep only rows with different A values and B value differences less than 0.005
  filter(A1 != A2 & abs(B1 - B2) < 0.005) |> 
  # Select the relevant columns to keep the original rows
  select(A1, B1)  |> 
  distinct()

# Extract the rows from the original data frame that match the criteria
filtered_amphet <- subset_amphet  |> 
  semi_join(df_filtered, by = c("compound_name" = "A1", "rt" = "B1"))


```

```{r}
mz_ims <- "C:\\Users\\vicer06\\OneDrive - Linköpings universitet\\Documents\\01_Projects\\03_Library_Building_DrugStD\\Individual_Drug_StD_240527\\Drug_StD_240527\\20240527_drugmix_200ppb_woadv_pos_2_C,1_1.mzML"
sp_ims <- Spectra(mz_ims)

# Filter for MS1 
sp_ims_ms1 <- filterMsLevel(sp_ims, msLevel. = 1)

# Extract mz, rtime, intensity, and scan index. Futhermore, bin values are created from scan index
mz_ms1 <- mz(sp_ims_ms1)
rtime_ms1 <- rtime(sp_ims_ms1)
intensity_ms1 <- intensity(sp_ims_ms1)
scanindex_ms1 <- scanIndex(sp_ims_ms1)
bin_values_ms1 <- rep(1:200, length.out = length(scanindex_ms1))
dtime_ms1 <- sp_ims_ms1[["ionMobilityDriftTime"]]

#Unlist mz and intensity values so it becomes a vector instead of a list with lists
mz_ms1_unlisted <- unlist(mz_ms1)
intensity_ms1_unlisted <- unlist(intensity_ms1)

# Function that repeates the values in some of the objects to be same length as mz values
repeat_ms1 <- function(A, B){
  unlist(mapply(function(a, b) rep(b, length(a)), A, B))
}

#Use function to extend rtime, scandindex, and bin values so they are repated to the length of mz
rtime_ms1_repated <- repeat_ms1(mz_ms1, rtime_ms1)
scanindex_ms1_repated <- repeat_ms1(mz_ms1, scanindex_ms1)
bin_values_ms1_repated <- repeat_ms1(mz_ms1, bin_values_ms1)
dtime_ms1_repated <- repeat_ms1(mz_ms1, dtime_ms1)


#Combine the new objects into a dataframe to make it easier to wokr with later
combine_raw_dataframe <- data.frame(scanindex_ms1 = scanindex_ms1_repated,
                                bin_values_ms1 = bin_values_ms1_repated,
                                mz_ms1 = mz_ms1_unlisted,
                                rtime_ms1 = rtime_ms1_repated/60,
                                intensity_ms1 = intensity_ms1_unlisted,
                                dtime_ms1 = dtime_ms1_repated
                                )
#Remove the unlisted and repated objects to same memory
rm(rtime_ms1_repated, scanindex_ms1_repated, bin_values_ms1_repated, mz_ms1_unlisted, intensity_ms1_unlisted, dtime_ms1_repated)


# Adds mz and rt range to the target compounds
tolerance_mz <- 0.0003  #0.0003
amphet_list$mz_min <- amphet_list$mz_target-tolerance_mz 
amphet_list$mz_max <- amphet_list$mz_target+tolerance_mz


# Finds the compounds from the target compounds in the raw data by using the join function
subset_amphet2 <- amphet_list |> 
  inner_join(combine_raw_dataframe, join_by(overlaps("mz_min","mz_max","mz_ms1", "mz_ms1"))) |> 
  filter(intensity_ms1 > 500)


# Perform a self-join to compare each row with every other row
df_filtered <- subset_amphet2 |> 
  rename(A1 = compound_name, B1 = rtime_ms1) |> 
  inner_join(subset_amphet2  |>  rename(A2 = compound_name, B2 = rtime_ms1), by = character())  |> 
  # Keep only rows with different A values and B value differences less than 0.005
  filter(A1 != A2 & abs(B1 - B2) < 0.001) |> 
  # Select the relevant columns to keep the original rows
  select(A1, B1)  |> 
  distinct()

# Extract the rows from the original data frame that match the criteria
filtered_amphet <- subset_amphet2  |> 
  semi_join(df_filtered, by = c("compound_name" = "A1", "rtime_ms1" = "B1"))

```
